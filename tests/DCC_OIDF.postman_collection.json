{
	"info": {
		"_postman_id": "63290bb1-3dfe-4af9-969a-c34d8595b216",
		"name": "DCC_OIDF",
		"description": "**OpenID Spec:** [<b>“Set up web services that can publish signed Entity Statements, one for the URL corresponding to the federation's Entity Identifier returning an Entity Configuration”</b>](https://openid.net/specs/openid-federation-1_0.html#name-setting-up-a-federation)\n\n- **This endpoint is used to get detailed metadata for the trust anchor**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32752644"
	},
	"item": [
		{
			"name": "test_existence_mvp_endpoints",
			"item": [
				{
					"name": "Trust Anchor Entity Configuration returns Status 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{TEST_URL}}/{{TRUST_ANCHOR_NAME}}/.well-known/openid-federation",
							"host": [
								"{{TEST_URL}}"
							],
							"path": [
								"{{TRUST_ANCHOR_NAME}}",
								".well-known",
								"openid-federation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful Federation Fetch returns status 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{TEST_URL}}/{{TRUST_ANCHOR_NAME}}/fetch?sub={{THIS_URL}}/{{ISSUERS_SUBFOLDER_NAME}}/{{TEST_ISSUER}}",
							"host": [
								"{{TEST_URL}}"
							],
							"path": [
								"{{TRUST_ANCHOR_NAME}}",
								"fetch"
							],
							"query": [
								{
									"key": "sub",
									"value": "{{THIS_URL}}/{{ISSUERS_SUBFOLDER_NAME}}/{{TEST_ISSUER}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful Federation Fetch returns status 404 and {}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content is an empty object\", function () {\r",
									"    pm.expect(pm.response.json()).to.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{TEST_URL}}/{{TRUST_ANCHOR_NAME}}/fetch?sub={{THIS_URL}}/{{ISSUERS_SUBFOLDER_NAME}}/NONEXISTENT_ISSUER",
							"host": [
								"{{TEST_URL}}"
							],
							"path": [
								"{{TRUST_ANCHOR_NAME}}",
								"fetch"
							],
							"query": [
								{
									"key": "sub",
									"value": "{{THIS_URL}}/{{ISSUERS_SUBFOLDER_NAME}}/NONEXISTENT_ISSUER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trust Anchor Subordinate Listing returns 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{TEST_URL}}/{{TRUST_ANCHOR_NAME}}/subordinate_listing",
							"host": [
								"{{TEST_URL}}"
							],
							"path": [
								"{{TRUST_ANCHOR_NAME}}",
								"subordinate_listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful internally hosted endpoint returns 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{TEST_URL}}/{{ISSUERS_SUBFOLDER_NAME}}/{{TEST_ISSUER}}/.well-known/openid-federation",
							"host": [
								"{{TEST_URL}}"
							],
							"path": [
								"{{ISSUERS_SUBFOLDER_NAME}}",
								"{{TEST_ISSUER}}",
								".well-known",
								"openid-federation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test_existence_did_trust_mark_search_endpoints",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TEST_URL",
			"value": "https://localhost:3000",
			"type": "string"
		},
		{
			"key": "THIS_URL",
			"value": "https://sandbox123123.example.com",
			"type": "string"
		},
		{
			"key": "TRUST_ANCHOR_NAME",
			"value": "issuer-registry",
			"type": "string"
		},
		{
			"key": "ISSUERS_SUBFOLDER_NAME",
			"value": "issuers",
			"type": "string"
		},
		{
			"key": "TEST_ISSUER",
			"value": "oneuni",
			"type": "string"
		}
	]
}